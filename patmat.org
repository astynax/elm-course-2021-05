* Pattern Matching / Сопоставление с образцом
Сопоставление с образцом — основной способ деконструкции составных значений, а так же замена для инструкции ветвления (~switch~) в других языках.
** Конструкция ~case .. of ..~
Синтаксис
#+BEGIN_SRC elm
case выражение of
    образец -> результат
    образец -> результат
    ...
#+END_SRC
Проверка на совпадение производится *сверху вниз*, при первом совпадении проверка останавливается и вычисляется соответствующий ~<результат>~ — итог вычисления будет значением *всего выражения case* (поэтому все ~<результаты>~ должны иметь одинаковый тип).
** Виды образцов
*** Конкретное значение
Образцом может выступать любое значение того же типа, что и ~<выражение>~. В этом случае проверяется *полное равенство* проверяемого значения и образца. Если значения структурно равны, то это считается "совпадением".

Пример:
#+BEGIN_SRC elm
type Color = R | G | B

toString : Color -> String
toString c =
    case c of
        R -> "R"
        G -> "G"
        B -> "B"
#+END_SRC
*** "Дикая карта" ("Wildcard")
Если вместо образца будет указан символ ~_~, то с этим образцом совпадёт *любое значение*.

Пример:
#+BEGIN_SRC elm
isRed : Color -> Bool
isRed c =
    case c of
        R -> True
        _ -> False
#+END_SRC
*** идентификатор
Если в роли образца указан идентификатор (имя, допустимое для определений), то с этим образцом совпадёт *любое значение* и это значение будет *связано* с идентификатором в контексте вычисления (и только в нём!) соответствующего ~<результата>~. Связывание значения с именем ещё называют "захватом" ("capturing").

Пример:
#+BEGIN_SRC elm
redToBlue : Color -> Color
redToBlue c =
    case c of
        R -> B
        other -> other
#+END_SRC
*** Конструктор с образцами в роли аргументов
Если в роли образца указан конструктор, то сначала для значения проверяется соответствие конструктора. Если таковое присутствует (значение собрано с использованием того же конструктора), то сопоставляются образцы-аргументы с соответствующими "подзначениями" ~<выражения>~ — попарно согласно тем же правилам.

Пример:
#+BEGIN_SRC elm
import String

type Subject
    = Person String
    | PetOf Person Kind String

type Kind = Dog | Cat

describe : Subject -> String
describe s =
    case s of
        Person name -> name
        PetOf _ Cat _ -> "just some cat"
        PetOf owner _ name ->
            String.concat
                [ name
                , " (owned by "
                , describe owner -- рекурсия
                , ")"
                ]
#+END_SRC
*** Запись (record)
Если образцом выступает выражение вида ~{a, b}~ то будут связаны перечисленные имена полей (то, что типы записей совпадают уже проверил компилятор).

Пример:
#+BEGIN_SRC elm
type alias Person = { name: String, age: Int }

describe : Person -> String
describe p =
    case p of
        Person { age, name } ->
            if age < 13
            then "just some kid"
            else String.append "an adult named " name
#+END_SRC

*Важно*: в Elm образец-record *всегда совпадает* со значением, даже если ничего не захватывает (~{}~)!
** Псевдонимы для образцов
Любой образец может быть связан с дополнительным именем с помощью указания следом за образцом конструкции ~as имя~. Такое бывает полезно, если нужно иметь ссылку как на "большое" значение, так и на какие-то его части.

Пример:
#+BEGIN_SRC elm
import String exposing (concat)
import Debug exposing (toString)

type RGB = RGB Int Int Int
type Gradient = Gradient RGB RGB

describe : Gradient -> String
describe g =
    case g of
        Gradient ((RGB r 0 0) as f) ((RGB 0 0 b) as t) ->
            case (r, b) of
                (0, 0) -> "from black to black"
                (_, 0) -> concat ["from some red (", toString f, ") to black"]
                (0, _) -> concat ["from black to some blue (", toString f, ")"]
                _ -> concat
                     [ "from some red ("
                     , toString f  -- цвет целиком
                     , ") to some blue ("
                     , toString t
                     , ")"
                     ]
        _ -> "unknown"
#+END_SRC
** Сопоставление с образцом в конструкции ~let .. in ..~
Конструкция ~let .. in ..~ позволяет объявлять локальные определения, являясь при этом выражением:

#+BEGIN_SRC elm
x =
    let
        y = 100
        z = 42
    in y + z * 3

foo = 1 + (let v = x - 1 in x * x) + 1000
#+END_SRC

Каждое определение содержит слева от ~=~ образец, не обязательно только лишь идентификатор. Единственное ограничение: образец должен быть "всегда совпадающим".

Примеры:
#+BEGIN_SRC elm
type Envelope = Wrapped Int

a42 : Int
a42 =
    let
        ((), Wrapped a) = ((), Wrapped 42)
        (_, b, _) = (a, a, a)
        {c} = {c = b}
    in c
#+END_SRC
** Сопоставление с образцом в определении функции
При описании функции также можно использовать "всегда совпадающие" образцы

Пример:
#+BEGIN_SRC elm
recombine : (a, b) -> (c, d) -> ((a, c), (b, d))
recombine (a, b) (c, d) = ((a, c), (b, d))
#+END_SRC
